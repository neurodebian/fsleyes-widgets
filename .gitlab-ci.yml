###########################################################################
# This file defines the build process for fsleyes-widgets, as hosted at:
#
#    https://git.fmrib.ox.ac.uk/fsl/fsleyes/widgets
#
# The build pipeline comprises the following stages:
#
#    1. test:   Unit tests. This stage is actually disabled for
#               fsleyes-widgets, because GTK mouse, keyboard, and focus
#               events behave differently under xvfb, and cause most
#               tests to fail.
#
#    2. style:  Check coding style
#
#    3. doc:    Building API documentation
#
#    4. build:  Building source distributions and wheels
#
#    5. deploy: Uploading the build outputs to pypi, and the documentation
#               to a hosting server.
#
# The test and style stages are executed on all branches of upstream and
# fork repositories.
#
# The doc stage, and the deploy-doc job, is executed on all branches of the
# upstream repository.
#
# The build stage, and the remaining jobs in the  deploy stage, are only
# executed on the upstream repository, and only for release tags.
#
# The deploy stages are manually instantiated.
###########################################################################


stages:
 - test
 - style
 - doc
 - build
 - deploy


###############################################################################
# A number of variables must be set for the jobs to work. The following
# variables are implicitly defined in any gitlab CI job:
#
#   - CI_PROJECT_PATH    - gitlab namespace/project
#   - CI_COMMIT_REF_NAME - branch name, provided by gitlab
#   - CI_COMMIT_TAG      - present if build is running on a tag
#
# These variables must be explicitly set as "secret" variables:
#
#   - SSH_PRIVATE_KEY_GIT            - private key for git login to remote host
#                                      (UPSTREAM_URL)
#
#   - SSH_PRIVATE_KEY_DOC_DEPLOY     - private key for rsyncing documentation
#                                      to remote host (DOC_HOST)
#
#   - SSH_SERVER_HOSTKEYS            - List of trusted SSH hosts
#
#   - DOC_HOST:                      - Username@host to upload documentation to
#                                      (e.g. "paulmc@jalapeno.fmrib.ox.ac.uk")
#
#   - TWINE_USERNAME:                - Username to use when uploading to pypi
#
#   - TWINE_PASSWORD:                - Password to use when uploading to pypi
#
#   - TWINE_REPOSITORY_URL:          - Pypi repository to upload to
#
#   - WXPYTHON_UBUNTU1404_URL:       - Url to a location containg binary wheels
#                                      for wxPython/ubuntu 14.04
#
#   - WXPYTHON_UBUNTU1604_URL:       - Url to a location containg binary wheels
#                                      for wxPython/ubuntu 16.04
###############################################################################


variables:
  UPSTREAM_PROJECT:     "fsl/fsleyes/widgets"
  UPSTREAM_URL:         "git@git.fmrib.ox.ac.uk"


####################################
# These anchors are used to restrict
# when and where jobs are executed.
####################################


.only_upstream: &only_upstream
  only:
    - branches@fsl/fsleyes/widgets


.only_master: &only_master
  only:
    - master@fsl/fsleyes/widgets


.only_releases: &only_releases
  only:
    - tags@fsl/fsleyes/widgets


.except_releases: &except_releases
  except:
    - tags


##########################################################
# The setup_ssh anchor contains a before_script section
# which does the following:
#
#  - Sets up key-based SSH login, and
#    installs the private keys, so
#    we can connect to servers.
#
#  - Configures git, and adds the
#    upstream repo as a remote
#
# (see https://docs.gitlab.com/ce/ci/ssh_keys/README.html)
#
# NOTE: It is assumed that non-docker
#       executors are already configured
#       (or don't need any configuration).
##########################################################


.setup_ssh: &setup_ssh
  before_script:

    - if [[ -f /.dockerenv ]]; then

        apt-get update -y                           || yum -y check-update                     || true;
        apt-get install -y git rsync openssh-client || yum install -y git rsync openssh-client || true;

        eval $(ssh-agent -s);
        mkdir -p $HOME/.ssh;

        echo "$SSH_PRIVATE_KEY_GIT" > $HOME/.ssh/id_git;

        if [[ "$CI_PROJECT_PATH" == "$UPSTREAM_PROJECT" ]]; then
          echo "$SSH_PRIVATE_KEY_DOC_DEPLOY" > $HOME/.ssh/id_doc_deploy;
        fi;

        chmod go-rwx $HOME/.ssh/id_*;

        ssh-add $HOME/.ssh/id_git;

        if [[ "$CI_PROJECT_PATH" == "$UPSTREAM_PROJECT" ]]; then
          ssh-add $HOME/.ssh/id_doc_deploy;
        fi

        echo "$SSH_SERVER_HOSTKEYS" > $HOME/.ssh/known_hosts;

        touch $HOME/.ssh/config;

        echo "Host ${UPSTREAM_URL##*@}"                    >> $HOME/.ssh/config;
        echo "    User ${UPSTREAM_URL%@*}"                 >> $HOME/.ssh/config;
        echo "    IdentityFile $HOME/.ssh/id_git"          >> $HOME/.ssh/config;

        echo "Host docdeploy"                              >> $HOME/.ssh/config;
        echo "    HostName ${DOC_HOST##*@}"                >> $HOME/.ssh/config;
        echo "    User ${DOC_HOST%@*}"                     >> $HOME/.ssh/config;
        echo "    IdentityFile $HOME/.ssh/id_doc_deploy"   >> $HOME/.ssh/config;

        echo "Host *"                                      >> $HOME/.ssh/config;
        echo "    IdentitiesOnly yes"                      >> $HOME/.ssh/config;

        git config --global user.name  "Gitlab CI";
        git config --global user.email "gitlabci@localhost";

        if [[ `git remote -v` == *"upstream"* ]]; then
            git remote remove upstream;
        fi;
        git remote add upstream "$UPSTREAM_URL:$UPSTREAM_PROJECT";
      fi


###################################################
# The patch_version anchor contains a before_script
# section which is run on release builds, and makes
# sure that the version in the code is up to date
# (i.e. equal to the tag name).
###################################################


.patch_version: &patch_version
  before_script:

    - if [[ "x$CI_COMMIT_TAG" != "x" ]]; then
        echo "Release detected - patching version - $CI_COMMIT_REF_NAME";
        sed -ie "s/^__version__ = .*$/__version__ = '$CI_COMMIT_REF_NAME'/g" fsleyes_widgets/__init__.py;
      fi


############
# Test stage
############


.test: &test_template
  <<: *setup_ssh

  # Releases are just tags on a release
  # branch, so we don't need to test them.
  <<: *except_releases

  tags:
    - docker

  script:

    # Install $PY_VERSION, xvfb, and all
    # of the wxpython dependencies.
    - apt-get update -y || true
    - apt-get install -y software-properties-common python-software-properties xvfb libgtk2.0-0 libnotify4 freeglut3 libsdl1.2debian
    - add-apt-repository -y ppa:deadsnakes/ppa
    - apt-get update -y || true
    - apt-get install -y $PY_VERSION "$PY_VERSION"-dev $PY_PACKAGES
    - $PY_VENV test.venv
    - source test.venv/bin/activate
    - pip install --upgrade pip setuptools

    # If running on a fork repository, we merge in the
    # upstream/master branch. This is done so that merge
    # requests from fork to the parent repository will
    # have unit tests run on the merged code, something
    # which gitlab CE does not currently do for us.
    - if [[ "$CI_PROJECT_PATH" != "$UPSTREAM_PROJECT" ]]; then
        git fetch upstream;
        git merge --no-commit --no-ff upstream/master;
      fi;

    - $INSTALL_WX

    # All other deps can be installed as normal.
    # We install test dependenciesd through pip,
    # because if we let setuptools do it, it
    # will build/install everything from source,
    # rather than using wheels.
    - pip install -r requirements.txt
    - pip install sphinx sphinx-rtd-theme
    - pip install pytest pytest-cov pytest-html pytest-runner mock coverage

    # Run the tests
    - xvfb-run python setup.py test
    - python -m coverage report


test:2.7:
  stage: test
  image: ubuntu:16.04
  <<: *test_template
  variables:
    PY_VERSION:  "python2.7"
    PY_PACKAGES: "python-pip python-virtualenv"
    PY_VENV:     "virtualenv"
    INSTALL_WX:  "pip install --only-binary wxpython -f $WXPYTHON_UBUNTU1604_URL wxpython"


# we use ubuntu:14.04 for python 3.4, because
# wxpython is not available for 16.04/3.4
test:3.4:
  stage: test
  image: ubuntu:14.04
  <<: *test_template
  variables:
    PY_VERSION:  "python3.4"
    PY_PACKAGES: "python3-pip python3.4-venv"
    PY_VENV:     "python3.4 -m venv"
    INSTALL_WX:  "pip install --pre -f $WXPYTHON_UBUNTU1404_URL wxpython"


test:3.5:
  stage: test
  image: ubuntu:16.04
  <<: *test_template
  variables:
    PY_VERSION:  "python3.5"
    PY_PACKAGES: "python3-pip python3-venv"
    PY_VENV:     "python3.5 -m venv"
    INSTALL_WX:  "pip install --only-binary wxpython -f $WXPYTHON_UBUNTU1604_URL wxpython"


test:3.6:
  stage: test
  image: ubuntu:16.04
  <<: *test_template
  variables:
    PY_VERSION:  "python3.6"
    PY_PACKAGES: "python3-pip python3.6-venv"
    PY_VENV:     "python3.6 -m venv"
    INSTALL_WX:  "pip install --only-binary wxpython -f $WXPYTHON_UBUNTU1604_URL wxpython"


#############
# Style stage
#############


style:
  stage: style
  image: ubuntu:16.04
  <<: *test_template
  variables:
    PY_VERSION:  "python3.5"
    PY_PACKAGES: "python3-pip python3-venv"
    PY_VENV:     "python3.5 -m venv"
    INSTALL_WX:  "pip install --only-binary wxpython -f $WXPYTHON_UBUNTU1604_URL wxpython"
    TEST_STYLE:  "true"


###########
# Doc stage
###########

build-doc:
  <<: *only_upstream
  <<: *patch_version

  tags:
   - docker

  stage: doc
  image: python:3.5

  script:
    - python setup.py doc
    - mv doc/html doc/"$CI_COMMIT_REF_NAME"
  artifacts:
    expire_in: 1 day
    paths:
      - doc/$CI_COMMIT_REF_NAME



#############
# Build stage
#############


build-dist:
  <<: *only_releases
  <<: *patch_version

  stage: build
  image: python:3.5

  tags:
    - docker

  script:
   - pip install wheel
   - python setup.py sdist
   - python setup.py bdist_wheel

  artifacts:
    expire_in: 1 day
    paths:
      - dist/*


##############
# Deploy stage
##############


deploy-doc:
  <<: *only_upstream
  <<: *setup_ssh
  stage: deploy
  when:  manual
  image: python:3.5

  tags:
    - docker

  dependencies:
    - build-doc

  script:
    - rsync -rv doc/"$CI_COMMIT_REF_NAME" "docdeploy:"


deploy-pypi:
  <<: *only_releases
  <<: *setup_ssh
  stage: deploy
  when:  manual
  image: python:3.5

  tags:
    - docker

  dependencies:
    - build-dist

  script:
    - pip install setuptools wheel twine
    - twine upload dist/*
