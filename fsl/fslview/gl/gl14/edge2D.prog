# Inputs:
#   coord
#   val
#   tol
#   offsets
#
# Outputs:
#   isEdge


TEMP off;
TEMP back;
TEMP front;
TEMP tempCoord;
TEMP isEdgeBack[2];
TEMP isEdgeFront[2];
TEMP isEdge;

# Test along the x axis
MOV off, offsets;
MUL off, off, {1, 0, 0, 0};

# Sample a value behind the coordinate
MOV tempCoord, coord;
ADD tempCoord, tempCoord, off;
TEX back, tempCoord, texture[0], 2D;

# Sample a value in front of the coordinatea
MOV tempCoord, coord;
SUB tempCoord, tempCoord, off;
TEX front, tempCoord, texture[0], 2D;

SUB back,  back,  val;
SUB front, front, val;
ABS back,  back;
ABS front, front;

SLT isEdgeBack[0],  tol, back;
SLT isEdgeFront[0], tol, front; 


# Test along the y axis
MOV off, offsets;
MUL off, off, {0, 1, 0, 0};

# Sample a value behind the coordinate
MOV tempCoord, coord;
ADD tempCoord, tempCoord, off;
TEX back, tempCoord, texture[0], 2D;

# Sample a value in front of the coordinatea
MOV tempCoord, coord;
SUB tempCoord, tempCoord, off;
TEX front, tempCoord, texture[0], 2D;

SUB back,  back,  val;
SUB front, front, val;
ABS back,  back;
ABS front, front;

SLT isEdgeBack[1],  tol, back;
SLT isEdgeFront[1], tol, front;  


# For each of the isEdgeBack/isEdgeFront
# vectors, set all components to 1 if an
# edge was found on any component.
DP4 isEdgeBack[ 0], isEdgeBack[ 0], isEdgeBack[ 0];
DP4 isEdgeFront[0], isEdgeFront[0], isEdgeFront[0];
DP4 isEdgeBack[ 1], isEdgeBack[ 1], isEdgeBack[ 1];
DP4 isEdgeFront[1], isEdgeFront[1], isEdgeFront[1];

# Set isEdge.i  if there was an edge
# on any component of the i axis.
MAX isEdge.x, isEdgeBack[0], isEdgeFront[0];
MAX isEdge.y, isEdgeBack[1], isEdgeFront[1];

# Clamp the isEdge values to 1
SGE isEdge, isEdge, 1;

# Clear if offsets[i] < 0
CMP isEdge, offsets, 0, isEdge;
