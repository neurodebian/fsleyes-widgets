!!ARBfp1.0
#
# Fragment program used for rendering GLVolume instances.
#
# This fragment program does the following:
# 
#  - Retrieves the display space/voxel coordinates corresponding to the
#    fragment
# 
#  - Uses those voxel coordinates to look up the corresponding voxel
#    value in the 3D image texture.
# 
#  - Uses that voxel value to look up the corresponding colour in the
#    1D colour map texture.
# 
#  - Sets the fragment colour.
#
# Required inputs:
#
#   fragment.texcoord[0] - Fragment position in the display coordinate system
#   fragment.texcoord[1] - Fragment position in the image voxel coordinate
#                          system
#   fragment.texcoord[2] - Optionally used as texture coordinates (see
#                          program.local[7]). 
#
#   program.local[0]  
#   program.local[1]
#   program.local[2]
#   program.local[3]     - Matrix which transforms voxel values into the range
#                          [0, 1], for use as a colour map texture coordinate
#
#   program.local[4]     - Image shape - number of voxels along the xyz
#                          dimensions in the image
#   program.local[5]     - Inverse of image shape
# 
#   program.local[6]     - Vector containing global brightness (x), contrast
#                          (y), and alpha (z) values to pass to the
#                          briconalpha.prog routine.
#
#   program.local[7]     - Vector containing clipping values - voxels with a
#                          value below the low threshold (x), or above the
#                          high threshold (y) will not be shown. Assumed to
#                          be normalised to the image texture value range.
#
#   program.local[8]     - If greater than or equal to 0, fragment.texcoord[1]
#                          is used as the coordinates for the texture lookup.
#                          Otherwise, fragment.texcoord[2] is used for the
#                          texture lookup.
#
# Outputs:
#
#   result.color         - The fragment colour (written by briconalpha.prog)
#
# Author: Paul McCarthy <pauldmccarthy@gmail.com>
#

TEMP  voxCoord;
TEMP  voxClip;
TEMP  normVoxCoord;
TEMP  voxValue;
TEMP  fragColour;

PARAM imageShape    = program.local[4];
PARAM imageShapeInv = program.local[5];
PARAM bca           = program.local[6];
PARAM clipping      = program.local[7];
PARAM useTexCoords  = program.local[8];
  
# This matrix scales the voxel value to
# lie in a range which is appropriate to
# the current display range 
PARAM voxValXform[4] = { program.local[0],
                         program.local[1],
                         program.local[2],
                         program.local[3] };

# retrieve the voxel coordinates,
# which should have been calculated
# by the vertex program
#
# If useTexCoords is < 0, we use
# fragment.texcoord[2] for the
# texture lookup, otherwise we use
# fragment.texcoord[1].
CMP voxCoord, useTexCoords, fragment.texcoord[2], fragment.texcoord[1];

# bail if the voxel coordinates
# are out of bounds
#pragma include test_in_bounds.prog

# Normalise voxel coordinates to 
# lie in the range (0, 1), so they 
# can be used for texture lookup
MUL normVoxCoord, voxCoord, imageShapeInv;

# look up image voxel value
# from 3D image texture
TEX voxValue, normVoxCoord, texture[0], 3D;

# If the voxel value is outside the
# clipping range, don't draw it

# Test the low clipping range
SUB voxClip, voxValue.x, clipping.x;
KIL voxClip;

# And the high clipping range
SUB voxClip, clipping.y, voxValue.x;
KIL voxClip;

# Scale voxel value according
# to the current display range
MAD voxValue, voxValue, voxValXform[0].x, voxValXform[0].w;

# look up the appropriate colour
# in the 1D colour map texture
TEX result.color, voxValue.x, texture[1], 1D;

END
