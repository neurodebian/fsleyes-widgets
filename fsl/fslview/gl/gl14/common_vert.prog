#
# Vertex program routine used for rendering GLObject instances.
#
# This routine does three things:
#
#  - Transforms vertex coordinates from display coordinates into screen
#    coordinates.
#
#  - Transforms vertex coordinates from display coordinates into voxel
#    coordinates.
#
#  - Sets the vertex texture coordinate from its display coordinates.
#
# Required inputs:
#
#   state.matrix.mvp   - Matrix which transforms from the display coordinate
#                        system to the screen coordinate system.
#
#   program.local[0]
#   program.local[1]
#   program.local[2]
#   program.local[3]   - Matrix which transforms from the display coordinate
#                        system to the image voxel coordinate system.
#
#   program.local[4]
#   program.local[5]
#   program.local[6]
#   program.local[7]   - Matrix which performs an arbitrary transformation in 
#                        the display coordinate system.
#
#   vertex.texcoord[0] - Optional texture coordinates - these are transformed
#                        to voxel coordinates, and passed through to the 
#                        fragment shader in result.texcoord[2]. This gives
#                        the option of using the vertex coordinates as texture
#                        coordinates, or to use independent texture
#                        coordinates, for the image texture lookup. Fragment
#                        programs get passed both, and will need to decide
#                        which coordinates to use.
#
# Outputs:
#
#   result.position    - vertex position in the screen coordinate system
#   result.texcoord[0] - vertex position in the display coordinate system
#   result.texcoord[1] - vertex position in the image voxel coordinate system
#   result.texcoord[2] - texture coordinates in the image voxel coordinate
#                        system
#
# Author: Paul McCarthy <pauldmccarthy@gmail.com>
#

TEMP vertexScreenPos;
TEMP vertexVoxelPos;
TEMP vertexTexCoord;

PARAM dispToScreenMat[4] = { state.matrix.mvp };
PARAM dispToVoxMat[   4] = { program.local[0],
                             program.local[1],
                             program.local[2],
                             program.local[3] };
PARAM worldToWorldMat[4] = { program.local[4],
                             program.local[5],
                             program.local[6],
                             program.local[7] };


# Transform the vertex position
# from display coordinates to
# screen coordinates, incorporating
# the arbitrary display space
# transformation
DP4 vertexScreenPos.x, worldToWorldMat[0], vertex.position;
DP4 vertexScreenPos.y, worldToWorldMat[1], vertex.position;
DP4 vertexScreenPos.z, worldToWorldMat[2], vertex.position;
DP4 vertexScreenPos.w, worldToWorldMat[3], vertex.position;

DP4 vertexScreenPos.x, dispToScreenMat[0], vertexScreenPos;
DP4 vertexScreenPos.y, dispToScreenMat[1], vertexScreenPos;
DP4 vertexScreenPos.z, dispToScreenMat[2], vertexScreenPos;
DP4 vertexScreenPos.w, dispToScreenMat[3], vertexScreenPos;

# Transform the vertex position
# from display coordinates to
# voxel coordinates
DP4 vertexVoxelPos.x, dispToVoxMat[0], vertex.position;
DP4 vertexVoxelPos.y, dispToVoxMat[1], vertex.position;
DP4 vertexVoxelPos.z, dispToVoxMat[2], vertex.position;
DP4 vertexVoxelPos.w, dispToVoxMat[3], vertex.position;

# And do the same for the 
# texture0 coordinates
DP4 vertexTexCoord.x, dispToVoxMat[0], vertex.texcoord[0];
DP4 vertexTexCoord.y, dispToVoxMat[1], vertex.texcoord[0];
DP4 vertexTexCoord.z, dispToVoxMat[2], vertex.texcoord[0];
DP4 vertexTexCoord.w, dispToVoxMat[3], vertex.texcoord[0];

# Offset voxel coordinates by 0.5 
# so they are centred within a voxel.
# See comments in gl21/common_vert.glsl
# for an explanation.
ADD vertexVoxelPos, vertexVoxelPos, { 0.5, 0.5, 0.5, 0.0 };
ADD vertexTexCoord, vertexTexCoord, { 0.5, 0.5, 0.5, 0.0 };

# Write the outputs
MOV result.position,    vertexScreenPos;
MOV result.texcoord[0], vertex.position;
MOV result.texcoord[1], vertexVoxelPos;
MOV result.texcoord[2], vertexTexCoord;
