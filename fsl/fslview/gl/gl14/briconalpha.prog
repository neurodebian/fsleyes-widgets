# Fragment program routine which applies brightness, contrast,
# and opacity values to a given colour, and writes the result
# to result.color.
#
# Inputs:
#   bca          - Vector which contains brightness (x), contrast (y), 
#                  and alpha (z) levels, as values in the range [0.0, 1.0]
# 
#   fragColour   - The colour to be adjusted.
#
# Outputs:
#   result.color - The resulting fragment colour.
#
# Author: Paul McCarthy <pauldmccarthy@gmail.com>
#

TEMP brightness;
TEMP contrast;
TEMP alpha;
TEMP tmpAlpha;

TEMP offset;
TEMP scale;
TEMP linScale;
TEMP expScale;
TEMP expTemp;

TEMP tempColour;

MOV brightness, bca.x;
MOV contrast,   bca.y;
MOV alpha,      bca.z;

#
# Calculate brightness
# 

# The brightness is applied as
# a linear offset, with 0.5
# equivalent to an offset of 0.0.
MOV offset, brightness;
MUL offset, offset, { 2, 2, 2, 0 };
SUB offset, offset, { 1, 1, 1, 0 };

#
# Calculate contrast
#

# If the contrast lies between 0.0
# and 0.5, it is applied to the
# colour as a linear scaling factor.
MOV linScale, contrast;
MUL linScale, linScale, { 2, 2, 2, 0 };

# If the contrast lies between 0.5 and 0.1, it
# is applied as an exponential scaling factor,
# so lower values (closer to 0.5) have less of
# an effect than higher values (closer to 1.0).
MOV expScale, linScale;
MOV expTemp,  contrast;
SUB expTemp,  expTemp, { 0.5, 0.5, 0.5, 0  };
MUL expTemp,  expTemp, {   6,   6,   6, 0  };
EX2 expTemp,  expTemp.x;
SUB expTemp,  expTemp,  { 1, 1, 1, 0 };
ADD expScale, expScale, expTemp;

# If contrast is <= 0.5, apply the
# linear scaling factor, otherwise
# apply the exponential factor.
SUB contrast, contrast, { 0.5, 0.5, 0.5, 0.0 };
CMP scale,    contrast, linScale, expScale;
MAD scale,    scale, { 1, 1, 1, 0 }, { 0, 0, 0, 1 };

#
# Prepare to apply the calculated
# brightness/contrast/alpha settings
#
MOV tempColour, fragColour;

#
# Apply alpha.
#

# If the existing colour
# has an alpha less than 1.0, use it
# instead of the global alpha.
MOV tmpAlpha, fragColour.a;
SUB tmpAlpha, tmpAlpha, { 1, 1, 1, 1 };
CMP tmpAlpha, tmpAlpha, fragColour.a, alpha;

MUL tmpAlpha,   tmpAlpha,   { 0.0, 0.0, 0.0, 1.0 };
MAD tempColour, tempColour, { 1.0, 1.0, 1.0, 0.0 }, tmpAlpha;

#
# Apply brightness
#

ADD tempColour, tempColour, offset;

# Clamp the RGBA values
# to the range [0, 1]
MIN tempColour, tempColour, { 1.0, 1.0, 1.0, 1.0 };
MAX tempColour, tempColour, { 0.0, 0.0, 0.0, 0.0 };

#
# Apply contrast
#

# Apply the scaling factor, but
# keep the new range centred at 0.5.
SUB tempColour, tempColour,        { 0.5, 0.5, 0.5, 0.0 };
MAD tempColour, tempColour, scale, { 0.5, 0.5, 0.5, 0.0 };

# Clamp again to [0, 1]
MIN tempColour, tempColour, { 1.0, 1.0, 1.0, 1.0 };
MAX tempColour, tempColour, { 0.0, 0.0, 0.0, 0.0 };

#
# Write the final colour
#

MOV result.color, tempColour;
