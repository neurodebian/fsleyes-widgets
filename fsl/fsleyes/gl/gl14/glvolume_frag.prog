!!ARBfp1.0
#
# Fragment program used for rendering GLVolume instances.
#
# This fragment program does the following:
# 
#  - Retrieves the display space/voxel coordinates corresponding to the
#    fragment
# 
#  - Uses those voxel coordinates to look up the corresponding voxel
#    value in the 3D image texture.
# 
#  - Uses that voxel value to look up the corresponding colour in the
#    1D colour map texture.
# 
#  - Sets the fragment colour.
#
# Required inputs:
#
#   fragment.texcoord[0] - Fragment texture coordinates
#   fragment.texcoord[1] - Fragment voxel coordinates 
#
#   program.local[0]  
#   program.local[1]
#   program.local[2]
#   program.local[3]     - Matrix which transforms voxel values into the range
#                          [0, 1], for use as a colour map texture coordinate
#
#   program.local[4]     - Image shape - number of voxels along the xyz
#                          dimensions in the image
# 
#   program.local[5]     - Vector containing clipping values - voxels with a
#                          value below the low threshold (x), or above the
#                          high threshold (y) will not be shown. The (z)
#                          component determines the clipping direction - pass
#                          in -1 for the above behaviour, or +1 to invert
#                          this behaviour (i.e. to clip values that are within
#                          the range). Clipping values are assumed to be
#                          normalised to the image texture value range.
#
# Outputs:
#
#   result.color         - The fragment colour
#
# Author: Paul McCarthy <pauldmccarthy@gmail.com>
#

TEMP  voxCoord;
TEMP  voxClipLo;
TEMP  voxClipHi;
TEMP  voxValue;

PARAM imageShape = program.local[4];
PARAM clipping   = program.local[5];
  
# This matrix scales the voxel value to
# lie in a range which is appropriate to
# the current display range 
PARAM voxValXform[4] = { program.local[0],
                         program.local[1],
                         program.local[2],
                         program.local[3] };

# retrieve the voxel coordinates,
# bail if they are are out of bounds  
MOV voxCoord, fragment.texcoord[1];

#pragma include test_in_bounds.prog

# look up image voxel value
# from 3D image texture
TEX voxValue, fragment.texcoord[0], texture[0], 3D;

# Test the low clipping range
SUB voxClipLo, voxValue.x, clipping.x;

# And the high clipping range
SUB voxClipHi, voxValue.x, clipping.y;

# Multiply the low/high results - after
# this, voxClipLo will be positive if
# the value is outside of the clipping
# range, or negative if the value is
# within the clipping range
MUL voxClipLo, voxClipLo, voxClipHi;

# Multiply by the clipping.z setting -
# this will invert the sign if normal
# clipping is active
MUL voxClipLo, voxClipLo, clipping.z;

# If the voxel value is outside 
# the clipping range (or inside,
# if clipping is inverted), don't
# draw it
KIL voxClipLo;

# Scale voxel value according
# to the current display range
MAD voxValue, voxValue, voxValXform[0].x, voxValXform[3].x;

# look up the appropriate colour
# in the 1D colour map texture
TEX result.color, voxValue.x, texture[1], 1D;

END
