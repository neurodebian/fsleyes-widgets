!!ARBfp1.0
#
# Fragment program used for rendering GLVolume instances. This is a faster
# (and more limited) version of the standard glvolume_frag.prog shader, which
# does not perform bounds checking, and does not allow the clipping range to
# be inverted.

# Required inputs:
#
#   fragment.texcoord[0] - Fragment texture coordinates
#
#   program.local[0]  
#   program.local[1]
#   program.local[2]
#   program.local[3]     - Matrix which transforms voxel values into the range
#                          [0, 1], for use as a colour map texture coordinate
#
#   program.local[5]     - Vector containing clipping values - voxels with a
#                          value below the low threshold (x), or above the
#                          high threshold (y) will not be shown. Assumed to
#                          be normalised to the image texture value range.
#
# Outputs:
#
#   result.color         - The fragment colour
#
# Author: Paul McCarthy <pauldmccarthy@gmail.com>
#

TEMP voxClip;
TEMP voxValue;
  
# look up image voxel value
# from 3D image texture
TEX voxValue, fragment.texcoord[0], texture[0], 3D;

# If the voxel value is outside the
# clipping range, don't draw it

# Test the low clipping range
SUB voxClip, voxValue.x, program.local[5].x;
KIL voxClip;

# And the high clipping range
SUB voxClip, program.local[5].y, voxValue.x;
KIL voxClip;

# Scale voxel value according
# to the current display range
MAD voxValue, voxValue, program.local[0].x, program.local[3].x;

# look up the appropriate colour
# in the 1D colour map texture
TEX result.color, voxValue.x, texture[1], 1D;

END
