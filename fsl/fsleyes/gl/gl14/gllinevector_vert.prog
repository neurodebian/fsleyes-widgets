!!ARBvp1.0
#
# Vertex program for rendering GLLineVector instances.
#
# Input parameters:
# 
#    invImageShape  - (first three components) inverse of image shape
#    voxelOffsets   - (first three components) Offset to apply to transformed
#                     voxel coordinates before flooring to integers.
#
# Outputs:
#    texCoord - the texture coordinates
#    voxCoord - the voxel coordinates
#
# Author: Paul McCarthy <pauldmccarthy@gmail.com>
#

TEMP texCoord;

PARAM invImageShape = {{ param_invImageShape }};
PARAM voxelOffsets  = {{ param_voxelOffsets  }};

# Transform the vertex position (which is in voxel
# coordinates) into display coordinates.  It is
# assumed that a voxel->display transformation has
# been encoded into the mvp matrix.
DP4 result.position.x, state.matrix.mvp.row[0], vertex.position;
DP4 result.position.y, state.matrix.mvp.row[1], vertex.position;
DP4 result.position.z, state.matrix.mvp.row[2], vertex.position;
DP4 result.position.w, state.matrix.mvp.row[3], vertex.position;

# Transform the vertex coordinates
# into integer voxel coordinates
MOV texCoord, vertex.position;
ADD texCoord, texCoord, voxelOffsets;
FLR texCoord, texCoord;

MOV {{ varying_voxCoord }}, texCoord;

# Transform those integer voxel
# coordinates into texture coordinates
ADD texCoord, texCoord, { 0.5, 0.5, 0.5, 0.0 };
MUL texCoord, texCoord, invImageShape;

MOV {{ varying_texCoord }}, texCoord;

END
