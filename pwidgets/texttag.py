#!/usr/bin/env python
#
# tagtext.py - The StaticTextTag and TextTagPanel classes.
#
# Author: Paul McCarthy <pauldmccarthy@gmail.com>
#
"""This module provides two classes:

.. autosummary::
   :nosignatures:

   StaticTextTag
   TextTagPanel


.. image:: images/texttagpanel.png
   :scale: 50%
   :align: center
"""


import random

import wx
import wx.lib.newevent as wxevent


class StaticTextTag(wx.Panel):
    """The ``StaticTextTag`` class is a ``wx.Panel`` which contains a
    ``StaticText`` control, and a *close* button. The displayed text
    and background colour are configurable.

    When the close button is pushed, an :data:`EVT_SST_CLOSE_EVENT` is
    generated.
    """

    
    def __init__(self,
                 parent,
                 text=None,
                 colour='#aaaaaa'):
        """Create a ``StaticTextTag``.

        :arg parent: The :mod:`wx` parent object.
        :arg text:   Initial text to display.
        :arg colour: Initial background colour.
        """

        wx.Panel.__init__(self, parent)

        self.__sizer    = wx.BoxSizer(wx.HORIZONTAL)
        self.__closeBtn = wx.StaticText(self,
                                        label='X',
                                        style=(wx.SUNKEN_BORDER         |
                                               wx.ALIGN_CENTRE_VERTICAL |
                                               wx.ALIGN_CENTRE_HORIZONTAL))
        self.__text     = wx.StaticText(self,
                                        style=(wx.ALIGN_CENTRE_VERTICAL |
                                               wx.ALIGN_CENTRE_HORIZONTAL))

        self.__closeBtn.SetFont(self.__closeBtn.GetFont().Smaller())
 
        self.__sizer.Add(self.__closeBtn, flag=(wx.ALIGN_CENTRE_VERTICAL |
                                                wx.ALIGN_CENTRE_HORIZONTAL))
        self.__sizer.Add(self.__text,     flag=(wx.ALIGN_CENTRE_VERTICAL |
                                                wx.ALIGN_CENTRE_HORIZONTAL))
        self.SetSizer(self.__sizer)
        
        self           .SetBackgroundColour(colour)
        self.__closeBtn.SetForegroundColour('#404040')
        self.SetText(text)

        self.__closeBtn.Bind(wx.EVT_LEFT_UP, self.__onCloseButton)


    def __str__(self):
        """Returns a string representation of this ``StaticTextTag``. """
        return 'StaticTextTag(\'{}\')'.format(self.GetText())


    def SetBackgroundColour(self, colour):
        """Sets the background colour of this ``StaticTextTag``. """
        if colour is None:
            return
        wx.Panel       .SetBackgroundColour(self, colour)
        self.__text    .SetBackgroundColour(colour)
        self.__closeBtn.SetBackgroundColour(colour)


    def SetText(self, text):
        """Sets the text shown on this ``StaticTextTag``. """
        self.__text.SetLabel(text)
        self.Layout()
        self.Fit() 


    def GetText(self):
        """Returns the text shown on this ``StaticTextTag``. """
        return self.__text.GetLabel()


    def __onCloseButton(self, ev):
        """Called when the close button is pushed. Generates an
        :data:`EVT_STT_CLOSE_EVENT`.
        """
        ev = StaticTextTagCloseEvent()
        ev.SetEventObject(self)
        wx.PostEvent(self, ev)


_StaticTextTagCloseEvent, _EVT_STT_CLOSE_EVENT = wxevent.NewEvent()


EVT_STT_CLOSE_EVENT = _EVT_STT_CLOSE_EVENT
"""Identifier for the event generated by a :class:`StaticTextTag` when its
close button is pushed.
"""


StaticTextTagCloseEvent = _StaticTextTagCloseEvent
"""Event object created for an :data:`EVT_STT_CLOSE_EVENT`. """


class TextTagPanel(wx.Panel):
    """The ``TextTagPanel`` is a panel which contains a ``wx.ComboBox``, and a
    collection of :class:`StaticTextTag` controls. The user can add new
    ``StaticTextTag` items via the combo box, and remove existing items via
    the ``StaticTextTag`` close buttons.

    
    The ``TextTagPanel`` supports the following styles:

    .. autosummary::
    
       TTP_ALLOW_NEW_TAGS
       TTP_ADD_NEW_TAGS
       TTP_NO_DUPLICATES

    
    The ``TextTagPanel`` generates the following events:

    .. autosummary::

       EVT_TTP_TAG_REMOVED_EVENT
       EVT_TTP_TAG_ADDED_EVENT
    """

    
    def __init__(self, parent, style=None):
        """Create a ``TextTagPanel``.

        :arg parent: The :mod:`wx` parent object.
        :arg style:  Style flags. Defaults to
                     ``TTP_ALLOW_NEW_TAGS | TTP_ADD_NEW_TAGS``.
        """
        
        wx.Panel.__init__(self, parent)

        if style is None:
            style = TTP_ALLOW_NEW_TAGS | TTP_ADD_NEW_TAGS

        self.__allowNewTags = style & TTP_ALLOW_NEW_TAGS
        self.__addNewTags   = style & TTP_ADD_NEW_TAGS
        self.__noDuplicates = style & TTP_NO_DUPLICATES

        if self.__allowNewTags:
            self.__newCombo = wx.ComboBox(self, style=wx.TE_PROCESS_ENTER)
        else:
            self.__newCombo = wx.ComboBox(self, style=wx.TE_READONLY)
            
        self.__mainSizer    = wx.BoxSizer( wx.HORIZONTAL)
        self.__tagSizer     = wx.WrapSizer(wx.HORIZONTAL, 2)
        
        # the WrapSizer style flags don't seem to
        # have made it into wxPython:
        #
        #     EXTEND_LAST_ON_EACH_LINE = 1
        #     REMOVE_LEADING_SPACES    = 2

        self.__mainSizer.Add(self.__newCombo)
        self.__mainSizer.Add(self.__tagSizer, flag=wx.EXPAND, proportion=1)

        self.__newCombo.Bind(wx.EVT_COMBOBOX,   self.__onNewCombo)
        self.__newCombo.Bind(wx.EVT_TEXT_ENTER, self.__onNewCombo)

        self.__allTags    = []
        self.__activeTags = {}
        self.__tagColours = {}

        self.SetSizer(self.__mainSizer)
        self.Layout()


    def SetOptions(self, options):
        """Sets the tag options made available to the user via the
        ``ComboBox``.
        """

        self.__allTags = list(options)
        self.__updateComboOptions()
        
        # TODO delete any active tags
        #      that are no longer valid

    
    def GetOptions(self):
        """Returns a list of all the tags that are currently available to the
        user.
        """
        return list(self.__allTags)


    def AddTag(self, tag, colour=None):
        """Add a new :class:`StaticTextTag` to this ``TextTagPanel``.

        :arg tag:    The tag text.
        :arg colour: The tag background colour.
        """

        if colour is None:
            colour = self.__tagColours.get(tag, None)

        if colour is None:
            colour = [random.randint(100, 255),
                      random.randint(100, 255),
                      random.randint(100, 255)]

        stt = StaticTextTag(self, tag, colour)
        
        stt.Bind(EVT_STT_CLOSE_EVENT, self.__onTagClose)
        
        self.__tagSizer.Add(stt, flag=wx.ALL, border=3)
        self.Layout()

        self.__tagColours[tag] = colour
        self.__activeTags[tag] = self.__activeTags.get(tag, 0) + 1
        self.__updateComboOptions()


    def HasTag(self, tag):
        """Returns ``True`` if the given tag is currently shown, ``False``
        otherwise.
        """
        return tag in self.__activeTags


    def SetTagColour(self, tag, colour):
        """Sets the background colour on all :class:`StaticTextTag` items
        which have the given tag text.
        """
        if tag not in self.__activeTags:
            return

        self.__tagColours[tag] = colour

        children = self.GetChildren()

        for child in children:
            if not isinstance(child, StaticTextTag):
                return

            if child.GetText() != tag:
                return

            child.SetBackgroundColour(colour)


    def __onNewCombo(self, ev):
        """Called when the user selects/enters a tag value via the
        ``ComboBox``.

        Adds a new ``StaticTextTag`` if it is appropriate to do so, and
        generates a :data:`EVT_TTP_TAG_ADDED_EVENT`.
        
        """
        tag  = self.__newCombo.GetValue()

        if tag.strip() == '':
            return

        if self.__noDuplicates and tag in self.__activeTags:
            return

        self.AddTag(tag)

        if self.__addNewTags and (tag not in self.__allTags):
            opts = self.GetOptions()
            self.SetOptions(opts + [tag])

        ev = TextTagPanelTagAddedEvent(tag=tag)
        ev.SetEventObject(self)
        wx.PostEvent(self, ev)

        
    def __onTagClose(self, ev):
        """Called when the user pushes the close button on a
        :class:`StaticTextTag`. Removes the tag, and generates a
        :data:`EVT_TTP_TAG_REMOVED_EVENT`.
        """
        stt = ev.GetEventObject()
        tag = stt.GetText()
        
        self.__tagSizer.Detach(stt)

        count = self.__activeTags[tag]

        if count == 1: self.__activeTags.pop(tag)
        else:          self.__activeTags[tag] = count - 1
        
        stt.Destroy()
        self.Layout()

        self.__updateComboOptions()

        ev = TextTagPanelTagRemovedEvent(tag=tag)
        ev.SetEventObject(self)
        wx.PostEvent(self, ev) 


    def __updateComboOptions(self):
        """Updates the options shown on the ``ComboBox`` """

        tags = list(self.__allTags)

        if self.__noDuplicates:
            tags = [t for t in tags if t not in self.__activeTags]
        
        # AutoComplete is not supported
        # under OSX/Cocoa :(
        self.__newCombo.Set(         tags)
        self.__newCombo.AutoComplete(tags)

        
TTP_ALLOW_NEW_TAGS  = 1
"""Style flag for use with a :class:`TextTagPanel` - if set, the user is able
to type in tag names that are not in the ``ComboBox``.
"""


TTP_ADD_NEW_TAGS = 2
"""Style flag for use with a :class:`TextTagPanel` - if set, when the user
types in a tag name that is not in the ``ComboBox``, that name is added to the
list of options in the ``ComboBox``.
"""


TTP_NO_DUPLICATES = 4
"""Style flag for use with a :class:`TextTagPanel` - if set, the user will be
prevented from adding the same tag more than once.
"""


_TextTagPanelTagAddedEvent,   _EVT_TTP_TAG_ADDED_EVENT   = wxevent.NewEvent()
_TextTagPanelTagRemovedEvent, _EVT_TTP_TAG_REMOVED_EVENT = wxevent.NewEvent()


EVT_TTP_TAG_ADDED_EVENT = _EVT_TTP_TAG_ADDED_EVENT
"""Identifier for the event generated when a tag is added to a
:class:`TextTagPanel`.
"""


TextTagPanelTagAddedEvent = _TextTagPanelTagAddedEvent
"""Event generated when a tag is added to a :class:`TextTagPanel`. A
``TextTagPanelTagAddedEvent`` has a single attribute called ``tag``, which
contains the tag text.
"""


EVT_TTP_TAG_REMOVED_EVENT = _EVT_TTP_TAG_REMOVED_EVENT
"""Identifier for the event generated when a tag is removed from a
:class:`TextTagPanel`.
"""


TextTagPanelTagRemovedEvent = _TextTagPanelTagRemovedEvent
"""Event generated when a tag is removed from a :class:`TextTagPanel`. A
``TextTagPanelTagRemovedEvent`` has a single attribute called ``tag``, which
contains the tag text.
"""
